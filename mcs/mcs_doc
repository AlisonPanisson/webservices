
/******************************************************************************
 * This research was sponsored by the U.S. Army Research Laboratory and the
 * U.K. Ministry of Defence under the Biennial Program Plane 2013 (BPP13),
 * Project 6, Task 3: Collaborative Intelligence Analysis.
 * The U.S. and U.K. Governments are authorized to reproduce and distribute
 * reprints for Government purposes notwithstanding any copyright notation
 * hereon.
 * **************************************************************************  
 */
 
 Installation:

1. download Apache Tomcat (or alike) http://tomcat.apache.org/

!!!! AND NEW REQUIREMENT: 
	1A) Add derbyclient.jar in /lib of Tomcat 
	1B) Add the following to context.xml (path/to/tomcat/conf/context.xml)
 
 <Resource name="jdbc/myDB"
    auth="Container"
    type="javax.sql.DataSource"
    username="gaiandb"
    password="passw0rd"
    driverClassName="org.apache.derby.jdbc.ClientDriver"
    url="jdbc:derby://localhost:6414/gaiandb"
    maxTotal="10"
    removeAbandonedOnBorrow="true"
    removeAbandonedTimeout="60"
    logAbandoned="true"
    />

2. download MCS folder from http://homepages.abdn.ac.uk/a.toniolo/pages/cisp/MCS.zip

3. unzip

4. Copy mcs.war in copy4server under webapps folder of Tomcat

5. Run Tomcat startup.sh/bat

6. Check that the services work: open a browser at http://localhost:8080/mcs/  and follow the instructions

-------------------------------------------------------------
Parameters on web.xml

A.  DATABASE SETTING: GAIAN but it could work with any other database as long as the jdbc is included in the lib folder 
 password-	passw0rd
 user-		gaiandb
 url- 		jdbc:derby://localhost:6414/gaiandb
 driver -	org.apache.derby.jdbc.ClientDriver
 

 
B. Moira Settings
    
moira_host_name - 178.62.33.18
moira_port - 8080 
moira_cards - /CeStoreWeb/concepts/card/instances?showStats=true
moira_posts - /CeStoreWeb/sentences
moira_name - Moira


C. Polling interval 

interval_sec - 30 in seconds
 

--------------------------------
Parameters are read in CISPACES/code/config/cis_settings.txt

REQUIRED env variables: 
--CISPACES


--------------------------------------------------
Libraries and dependencies: (the needed one are already copied in provdata/WEB-INF 
-lib includes all the package distributions and licenses)

- JERSEY: RESTful Web Services in Java v2.7  https://jersey.java.net/
- PROV-API:Java API for managing provenance models using prov-o https://github.com/dcorsar/prov-api
- GSON: JSon to Java objects: https://code.google.com/p/google-gson/
- JENA: Java framework for building Semantic Web and Linked Data applications: https://jena.apache.org/ 
- JODA TIME v2.3: Java date and time API: http://www.joda.org/joda-time/
- Derby JDBC driver: derbyclient.jar  for connection to the Gaian database http://db.apache.org/derby/docs/10.7/devguide/cdevdvlp40653.html

Tested with Apache Tomcat 7-8, JAVA SE 7 
------------------------------------------------
Development: 

Service available at:

http://localhost:8080/mcs/rest/AskMoira

for posting information

 
Service has a polling system that periodically checks Moira status, needs connection with Gaian to do so
 
------------------------------
 
 

---GETALL
{
"action":"getall",
"user":"Miles" //user
}
*** returns 

{"queries":[
		{
		"query_id":"0Miles9b34f9bd-c747-4859-addf-9bde2942f915",
		"query_text":"Who is the IED maker?"
		}, ....]
}
or empty if users does not exists or has no queries {"queries":[]}

----CLOSE QUERY 
{
"action":"closequery",
"queryID":"0Joe6ty82a6d-ec6c-4f0c-a626-3cd8bb683e02"
}

*** returns
 {"result":"success"}
 
 
 
 ----OPEN QUERY
 
 //FOR A NEW QUERY
{"action":"openquery",
"user":"Joe",										//the user
"text":"￼￼a IED caused the explosion at the hotel",	//the text of the node (correspondent to nodeID)
"msg":"is there a suspect?",						//the initial question 
"nodeID":"6ty82a6d-ec6c-4f0c-a626-3cd8bb683e02", //the initial nodeID
"shared":false					//true if this comes from the shared or the individual workbox false
}
 
//FOR SENDING FOLLOWING UP MESSAGES 
{"action":"openquery",
"user":"Joe",										//the user
"msg":"is there a suspect?",						//the initial question 
"queryID":"0Joe6ty82a6d-ec6c-4f0c-a626-3cd8bb683e02", //the query ID
}
*** returns

{"result":"success"} or {"result":"fail"} depending on everything going ok (if network or gaian do not work fail for example)


-----GET UPDATES


{"action":"getupdates",
"queryID":"0Miles9b34f9bd-c747-4859-addf-9bde2942f915"
} 

*** returns



{"shared":false,			//true if this comes from the shared or the individual workbox false
"cis_data":{				//usual nodes, edges and prov of the string corresponding to updates (to be imported)
	"edges":[ ],
	"nodes":[ ],
	"prov": {....}
	},
"text":"The IED caused the hotel to explode", 								// text of the initial node
"history":"2015/08/31 19:16:40-Miles to Moira:Who is the IED maker?\n", 	//list of messages that have been previously exchanged from the beginning in the format 'date: text \n' or 'date: text \n rule of rationale 1 \n ... \n'
"updates":"2015/08/31 09:16:41-Moira to Miles:The IED maker is John\n", 	//list of new updates in the format 'date: text \n' or 'date: text \n rule of rationale 1 \n ... \n' or if no updates just an empty list "updates":""
"nodeID":"9b34f9bd-c747-4859-addf-9bde2942f915" 							//id of the initial node (which is also the root if some rationale is needed to be added 

}


if queryID does not exists returns 

{"result":"fail"} 