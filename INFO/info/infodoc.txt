/******************************************************************************
 * This research was sponsored by the U.S. Army Research Laboratory and the
 * U.K. Ministry of Defence under the Biennial Program Plane 2013 (BPP13),
 * Project 6, Task 3: Collaborative Intelligence Analysis.
 * The U.S. and U.K. Governments are authorized to reproduce and distribute
 * reprints for Government purposes notwithstanding any copyright notation
 * hereon.
 * **************************************************************************  
 */
 
 Installation:

1. download Apache Tomcat (or alike) http://tomcat.apache.org/

!!!! AND NEW REQUIREMENT: 
	1A) Add derbyclient.jar in /lib of Tomcat 
	1B) Add the following to context.xml (path/to/tomcat/conf/context.xml)
 
 <Resource name="jdbc/myDB"
    auth="Container"
    type="javax.sql.DataSource"
    username="gaiandb"
    password="passw0rd"
    driverClassName="org.apache.derby.jdbc.ClientDriver"
    url="jdbc:derby://localhost:6414/gaiandb"
    maxTotal="10"
    removeAbandonedOnBorrow="true"
    removeAbandonedTimeout="60"
    logAbandoned="true"
    />

2. download INFO folder from http://homepages.abdn.ac.uk/a.toniolo/pages/cisp/INFO.zip

3. unzip

4. Copy info.war in copy4server under webapps folder of Tomcat

5. Run Tomcat startup.sh/bat

6. Check that the services work: open a browser at http://localhost:8080/info/  and follow the instructions

-------------------------------------------------------------
Parameters on web.xml

A.  DATABASE SETTING: GAIAN but it could work with any other database as long as the jdbc is included in the lib folder 
 password-	passw0rd
 user-		gaiandb
 url- 		jdbc:derby://localhost:6414/gaiandb
 driver -	org.apache.derby.jdbc.ClientDriver
 

 
B. Interval  of time to generate new information 
interval- 1 (min) 

C. Random generator of information 
randgen- true/false
--------------------------------
Parameters are read in CISPACES/code/config/cis_settings.txt

REQUIRED env variables: 
--CISPACES


--------------------------------------------------
Libraries and dependencies: (the needed one are already copied in provdata/WEB-INF 
-lib includes all the package distributions and licenses)

- JERSEY: RESTful Web Services in Java v2.7  https://jersey.java.net/
- PROV-API:Java API for managing provenance models using prov-o https://github.com/dcorsar/prov-api
- GSON: JSon to Java objects: https://code.google.com/p/google-gson/
- JENA: Java framework for building Semantic Web and Linked Data applications: https://jena.apache.org/ 
- JODA TIME v2.3: Java date and time API: http://www.joda.org/joda-time/
- Derby JDBC driver: derbyclient.jar  for connection to the Gaian database http://db.apache.org/derby/docs/10.7/devguide/cdevdvlp40653.html

Tested with Apache Tomcat 7-8, JAVA SE 7 
------------------------------------------------
Development: 

Service available at:

http://localhost:8080/info/rest/GetInfo

for retrieving information


Service at: 

http://localhost:8080/info/rest/GetInfo

for posting information

 
 
 
------------------------------
 
 
 
IN/OUT GET: 
 
Input JSON String:
{"user":"uhx","aff":"US","status":true}

user: string with username as per login 
aff: string affiliation as per login
status: 
- true: initial login - sends all the information that the user+affiliation has already received
- false: update - checks for new available information for the user+affiliation
 

JSON OUT

Array of Info Strings (at the moment randomly generated and returned only after at least 5 minute(set interval)) 

 

INFO: {
  "info": [
    {
      "nodeID": "df222a6d-ec6c-4f0c-a424-3cd8bb683e02",
      "text": "Info 14f9940d 6e1e 4ffc 9c3c 07e92d3c236c",
      "source": "RandomDataStream",
      "dtg": "2014/08/28 02:14:50"
    },
    {
      "nodeID": "41c9cbe2-d3be-4843-890c-4abc268f9193",
      "text": "Info a106f5a3 0532 438a 9631 5780291a1510",
      "source": "RandomDataStream",
      "dtg": "2014/08/28 02:14:50"
    },
    {
      "nodeID": "e2bae1b0-b519-4da4-83a0-0487fedd9c2c",
      "text": "Info 995c7c8f f01a 41e1 a9a0 4fe1a7be9d14",
      "source": "RandomDataStream",
      "dtg": "2014/08/28 02:14:51"
    }
  ]
}

If empty= no new information available (this happens if checked before than a minute since last check)
{
  "info": []
}
-------------- 
IN OUT for POST 

{"dest":"US", //either user or affiliation
"stream":"MOIRA", 
 "info": [
    {
      "nodeID": "df222a6d-ec6c-4f0c-a424-3cd8bb683e02",
      "text": "Info 14f9940d 6e1e 4ffc 9c3c 07e92d3c236c",
      "source": "RandomDataStream",
      "dtg": "2014/08/28 02:14:50"
    },
    {
      "nodeID": "41c9cbe2-d3be-4843-890c-4abc268f9193",
      "text": "Info a106f5a3 0532 438a 9631 5780291a1510",
      "source": "RandomDataStream",
      "dtg": "2014/08/28 02:14:50"
    },
    {
      "nodeID": "e2bae1b0-b519-4da4-83a0-0487fedd9c2c",
      "text": "Info 995c7c8f f01a 41e1 a9a0 4fe1a7be9d14",
      "source": "RandomDataStream",
      "dtg": "2014/08/28 02:14:51"
    }
  ]
 }
  
  
curl -X POST -H "Content-Type: application/json" -d '{"dest":"US","stream":"MOIRA",  "info": [{  "nodeID": "df222a6d-ec6c-4f0c-a424-3cd8bb683e02",  "text": "some info 1",  "source": "Patrol",  "dtg": "2014/08/28 02:14:50"},{  "nodeID": "41c9cbe2-d3be-4843-890c-4abc268f9193",  "text": "info0 two",  "source": "alun patrol",  "dtg": "2014/08/28 02:14:50"},{  "nodeID": "e2bae1b0-b519-4da4-83a0-0487fedd9c2c",  "text": "some info 3",  "source": "alice Patrol",  "dtg": "2014/08/28 02:14:51"}  ]}' http://localhost:8080/info/rest/PostInfo


curl -X POST -H "Content-Type: application/json" -d '{"dest":"Joe","stream":"MOIRA",  "info": [{  "nodeID": "df222a6d-ec6c-4f0c-a424-3cd8bb683e02",  "text": "some info 1",  "source": "Patrol",  "dtg": "2014/08/28 02:14:50"}]}' http://localhost:8080/info/rest/PostInfo

 
 
 




----------------------
Service also prepare the basis for provenance information.

------------------

Example: 

A. All info available for user uhx affiliation US:

set 0:
info 1
info 2

set 1: 
info 3
info 4

set 2:
info 5
info 6

set 3:
info 7
info 8

B. user logs in for the first time:
status: true
receives set 0 (info 1-2)

C. after this all the requests to the service have status false
receives set 1 (info 3-4)

D. User logs out

E. user logs in again 
status: true
receives set 0-1(info 1-2-3-4)

F. all the requests after have status true
receives set 2(info 5-6)
receives set 3(info 7-8)/
... and so on...




curl -X POST -H "Content-Type: application/json" -d '{"dest":"US","stream":" hgf ",  "info": [{  "nodeID": "b3ff851d-79a1-4991-98b7-d53f557bbb22",  "text": "ndfghdn dfd df gkhl",  "source": "bdfg hgt",  "dtg": "2016/03/16 01:51:50"} ]}' http://localhost:8080/info/rest/PostInfo



